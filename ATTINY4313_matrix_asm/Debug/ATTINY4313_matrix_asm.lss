
AVRASM ver. 2.2.8  C:\Users\Mateusz\Documents\Atmel Studio\7.0\ATTINY4313_matrix_asm\ATTINY4313_matrix_asm\ATTINY4313_matrix_asm.asm Wed Nov 10 14:13:01 2021

[builtin](2): Including file 'D:/7.0\Packs\atmel\ATtiny_DFP\1.3.229\avrasm\inc\tn4313def.inc'
C:\Users\Mateusz\Documents\Atmel Studio\7.0\ATTINY4313_matrix_asm\ATTINY4313_matrix_asm\ATTINY4313_matrix_asm.asm(9): Including file 'D:/7.0\Packs\atmel\ATtiny_DFP\1.3.229\avrasm\inc\tn4313def.inc'
[builtin](2): Including file 'D:/7.0\Packs\atmel\ATtiny_DFP\1.3.229\avrasm\inc\tn4313def.inc'
C:\Users\Mateusz\Documents\Atmel Studio\7.0\ATTINY4313_matrix_asm\ATTINY4313_matrix_asm\ATTINY4313_matrix_asm.asm(9): Including file 'D:/7.0\Packs\atmel\ATtiny_DFP\1.3.229\avrasm\inc\tn4313def.inc'
                                 
                                 /*
                                 
                                 ;***** Created: 2011-02-09 12:04 ******* Source: ATtiny4313.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "tn4313def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATtiny4313
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATtiny4313
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _TN4313DEF_INC_
                                 #define _TN4313DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATtiny4313
                                 #pragma AVRPART ADMIN PART_NAME ATtiny4313
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x92
                                 .equ	SIGNATURE_002	= 0x0d
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2
                                 #pragma AVRPART CORE NEW_INSTRUCTIONS lpm rd,z+
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0B	= 0x3c
                                 .equ	GIMSK	= 0x3b
                                 .equ	EIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	OCR0A	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	TCCR0B	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	TCCR0A	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	CLKPR	= 0x26
                                 .equ	ICR1L	= 0x24
                                 .equ	ICR1H	= 0x25
                                 .equ	GTCCR	= 0x23
                                 .equ	TCCR1C	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	PCMSK	= 0x20
                                 .equ	EEAR	= 0x1e
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	GPIOR2	= 0x15
                                 .equ	GPIOR1	= 0x14
                                 .equ	GPIOR0	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	USIDR	= 0x0f
                                 .equ	USISR	= 0x0e
                                 .equ	USICR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	BODCR	= 0x07
                                 .equ	PRR	= 0x06
                                 .equ	PCMSK2	= 0x05
                                 .equ	PCMSK1	= 0x04
                                 .equ	UCSRC	= 0x03
                                 .equ	UBRRH	= 0x02
                                 .equ	DIDR	= 0x01
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	OCIE0A	= 0	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	TOIE0	= 1	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	OCF0A	= 0	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	TOV0	= 1	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Match Output B Mode
                                 .equ	COM0B1	= 5	; Compare Match Output B Mode
                                 .equ	COM0A0	= 6	; Compare Match Output A Mode
                                 .equ	COM0A1	= 7	; Compare Match Output A Mode
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	TCCR0	= TCCR0B	; For compatibility
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare B
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	ICIE1	= 3	; Timer/Counter1 Input Capture Interrupt Enable
                                 .equ	TICIE	= ICIE1	; For compatibility
                                 .equ	OCIE1B	= 5	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 6	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TOIE1	= 7	; Timer/Counter1 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	ICF1	= 3	; Input Capture Flag 1
                                 .equ	OCF1B	= 5	; Output Compare Flag 1B
                                 .equ	OCF1A	= 6	; Output Compare Flag 1A
                                 .equ	TOV1	= 7	; Timer/Counter1 Overflow Flag
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1B0	= 4	; Comparet Ouput Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode Bit 2
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode Bit 3
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; Force Output Compare for Channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for Channel A
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART Transmission Speed
                                 .equ	UPE	= 2	; USART Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size Bit 0
                                 .equ	UCSZ1	= 2	; Character Size Bit 1
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select 0
                                 .equ 	UMSEL1 	= 7 ; USART Mode Select 1
                                 .equ 	UCPHA  	= 1 ; USART MSPIM Clock Phase
                                 .equ 	UDORD  	= 2 ; USART MSPIM Data Order 
                                 
                                 .equ	UBRR	= UBRRL	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; 
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Data Register, Port D
                                 .equ	PORTD0	= 0	; 
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; 
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; 
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; 
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; 
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; 
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; 
                                 .equ	PD6	= 6	; For compatibility
                                 
                                 ; DDRD - Data Direction Register, Port D
                                 .equ	DDD0	= 0	; 
                                 .equ	DDD1	= 1	; 
                                 .equ	DDD2	= 2	; 
                                 .equ	DDD3	= 3	; 
                                 .equ	DDD4	= 4	; 
                                 .equ	DDD5	= 5	; 
                                 .equ	DDD6	= 6	; 
                                 
                                 ; PIND - Input Pins, Port D
                                 .equ	PIND0	= 0	; 
                                 .equ	PIND1	= 1	; 
                                 .equ	PIND2	= 2	; 
                                 .equ	PIND3	= 3	; 
                                 .equ	PIND4	= 4	; 
                                 .equ	PIND5	= 5	; 
                                 .equ	PIND6	= 6	; 
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEAR - EEPROM Read/Write Access
                                 .equ	EEARL	= EEAR	; For compatibility
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access bit 6
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEWE	= EEPE	; For compatibility
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EEMWE	= EEMPE	; For compatibility
                                 .equ	EERIE	= 3	; EEProm Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; 
                                 .equ	EEPM1	= 5	; 
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 
                                 
                                 ; ***** USI **************************
                                 ; USIDR - USI Data Register
                                 .equ	USIDR0	= 0	; USI Data Register bit 0
                                 .equ	USIDR1	= 1	; USI Data Register bit 1
                                 .equ	USIDR2	= 2	; USI Data Register bit 2
                                 .equ	USIDR3	= 3	; USI Data Register bit 3
                                 .equ	USIDR4	= 4	; USI Data Register bit 4
                                 .equ	USIDR5	= 5	; USI Data Register bit 5
                                 .equ	USIDR6	= 6	; USI Data Register bit 6
                                 .equ	USIDR7	= 7	; USI Data Register bit 7
                                 
                                 ; USISR - USI Status Register
                                 .equ	USICNT0	= 0	; USI Counter Value Bit 0
                                 .equ	USICNT1	= 1	; USI Counter Value Bit 1
                                 .equ	USICNT2	= 2	; USI Counter Value Bit 2
                                 .equ	USICNT3	= 3	; USI Counter Value Bit 3
                                 .equ	USIDC	= 4	; Data Output Collision
                                 .equ	USIPF	= 5	; Stop Condition Flag
                                 .equ	USIOIF	= 6	; Counter Overflow Interrupt Flag
                                 .equ	USISIF	= 7	; Start Condition Interrupt Flag
                                 
                                 ; USICR - USI Control Register
                                 .equ	USITC	= 0	; Toggle Clock Port Pin
                                 .equ	USICLK	= 1	; Clock Strobe
                                 .equ	USICS0	= 2	; USI Clock Source Select Bit 0
                                 .equ	USICS1	= 3	; USI Clock Source Select Bit 1
                                 .equ	USIWM0	= 4	; USI Wire Mode Bit 0
                                 .equ	USIWM1	= 5	; USI Wire Mode Bit 1
                                 .equ	USIOIE	= 6	; Counter Overflow Interrupt Enable
                                 .equ	USISIE	= 7	; Start Condition Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GIMSK - General Interrupt Mask Register
                                 .equ	PCIE	= 5	; 
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - Extended Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	PCIF	= 5	; 
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; PCMSK2 - Pin Change Interrupt Mask Register 2
                                 .equ	PCINT11	= 0	; Pin Change Interrupt Mask 11
                                 .equ	PCINT12	= 1	; Pin Change Interrupt Mask 12
                                 .equ	PCINT13	= 2	; Pin Change Interrupt Mask 13
                                 .equ	PCINT14	= 3	; Pin Change Interrupt Mask 14
                                 .equ	PCINT15	= 4	; Pin Change Interrupt Mask 15
                                 .equ	PCINT16	= 5	; Pin Change Interrupt Mask 16
                                 .equ	PCINT17	= 6	; Pin Change Interrupt Mask 17
                                 
                                 ; PCMSK1 - Pin Change Interrupt Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Interrupt Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Interrupt Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Interrupt Mask 10
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	RFLB	= 3	; Read Fuse and Lock Bits
                                 .equ	CTPB	= 4	; Clear Temporary Page Buffer
                                 .equ RSIG 	    = 5 ; Read Device Signature Imprint Table
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select Bit 0
                                 .equ	SM	= SM0	; For compatibility
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SM1	= 6	; Sleep Mode Select Bit 1
                                 .equ	PUD	= 7	; Pull-up Disable
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; MCUSR - MCU Status register
                                 .equ	PORF	= 0	; Power-On Reset Flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Register
                                 .equ	CAL0	= 0	; Oscillatro Calibration Value Bit 0
                                 .equ	CAL1	= 1	; Oscillatro Calibration Value Bit 1
                                 .equ	CAL2	= 2	; Oscillatro Calibration Value Bit 2
                                 .equ	CAL3	= 3	; Oscillatro Calibration Value Bit 3
                                 .equ	CAL4	= 4	; Oscillatro Calibration Value Bit 4
                                 .equ	CAL5	= 5	; Oscillatro Calibration Value Bit 5
                                 .equ	CAL6	= 6	; Oscillatro Calibration Value Bit 6
                                 
                                 ; GTCCR - General Timer Counter Control Register
                                 .equ	SFIOR	= GTCCR	; For compatibility
                                 .equ	PSR10	= 0	; 
                                 
                                 ; PCMSK - Pin-Change Mask register
                                 .equ	PCINT0	= 0	; Pin-Change Interrupt 0
                                 .equ	PCINT1	= 1	; Pin-Change Interrupt 1
                                 .equ	PCINT2	= 2	; Pin-Change Interrupt 2
                                 .equ	PCINT3	= 3	; Pin-Change Interrupt 3
                                 .equ	PCINT4	= 4	; Pin-Change Interrupt 4
                                 .equ	PCINT5	= 5	; Pin-Change Interrupt 5
                                 .equ	PCINT6	= 6	; Pin-Change Interrupt 6
                                 .equ	PCINT7	= 7	; Pin-Change Interrupt 7
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; General Purpose I/O Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose I/O Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose I/O Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose I/O Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose I/O Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose I/O Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose I/O Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose I/O Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; General Purpose I/O Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose I/O Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose I/O Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose I/O Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose I/O Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose I/O Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose I/O Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose I/O Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; General Purpose I/O Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose I/O Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose I/O Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose I/O Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose I/O Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose I/O Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose I/O Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose I/O Register 0 bit 7
                                 
                                 ; PRR - Power reduction register
                                 .equ	PRUSART	= 0	; 
                                 .equ	PRUSI	= 1	; 
                                 .equ	PRTIM0	= 2	; 
                                 .equ	PRTIM1	= 3	; 
                                 
                                 ; BODCR - BOD control register
                                 .equ	BPDSE	= 0	; 
                                 .equ	BPDS	= 1	; 
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lockbit
                                 .equ	LB2	= 1	; Lockbit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	SELFPRGEN	= 0	; Self Programming Enable
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x07ff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 256
                                 .equ	RAMEND	= 0x015f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x00ff
                                 .equ	EEPROMEND	= 0x00ff
                                 .equ	EEADRBITS	= 8
                                 #pragma AVRPART MEMORY PROG_FLASH 4096
                                 #pragma AVRPART MEMORY EEPROM 256
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 256
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x0
                                 .equ	NRWW_STOP_ADDR	= 0x3ff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x0
                                 .equ	PAGESIZE	= 32
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                                 .equ	ICP1addr	= 0x0003	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0004	; Timer/Counter1 Compare Match A
                                 .equ	OC1addr	= 0x0004	; For compatibility
                                 .equ	OVF1addr	= 0x0005	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0006	; Timer/Counter0 Overflow
                                 .equ	URXCaddr	= 0x0007	; USART, Rx Complete
                                 .equ	URXC0addr	= 0x0007	; For compatibility
                                 .equ	UDREaddr	= 0x0008	; USART Data Register Empty
                                 .equ	UDRE0addr	= 0x0008	; For compatibility
                                 .equ	UTXCaddr	= 0x0009	; USART, Tx Complete
                                 .equ	UTXC0addr	= 0x0009	; For compatibility
                                 .equ	ACIaddr	= 0x000a	; Analog Comparator
                                 .equ	PCIBaddr	= 0x000b	; Pin Change Interrupt Request B
                                 .equ	PCIaddr	= 0x000b	; For compatibility
                                 .equ	OC1Baddr	= 0x000c	; 
                                 .equ	OC0Aaddr	= 0x000d	; 
                                 .equ	OC0Baddr	= 0x000e	; 
                                 .equ	USI_STARTaddr	= 0x000f	; USI Start Condition
                                 .equ	USI_OVFaddr	= 0x0010	; USI Overflow
                                 .equ	ERDYaddr	= 0x0011	; 
                                 .equ	WDTaddr	= 0x0012	; Watchdog Timer Overflow
                                 .equ	PCIAaddr	= 0x0013	; Pin Change Interrupt Request A
                                 .equ	PCIDaddr	= 0x0014	; Pin Change Interrupt Request D
                                 
                                 .equ	INT_VECTORS_SIZE	= 21	; size in words
                                 
                                 #endif  /* _TN4313DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                  * ATTINY4313_matrix_asm.asm
                                  *
                                  *  Created: 2019-03-25 22:06:47
                                  *   Author: Mateusz
                                  */ 
                                 
                                 .LIST
                                 
                                 		.EQU presc = 0			; clock prescaler value (Fcpu = clock / [2^presc])
                                 			.IF presc > 8
                                 			.ENDIF
                                 		.EQU graph_buff = 5		; graphics frame buffer size (1 Byte = 1 Graph line)
                                 		.EQU char_buff = 20		; characters buffer size (1 Byte = 1 Character)
                                 
                                 		.EQU v_internal_L = GPIOR0
                                 		.EQU v_internal_H = GPIOR1
                                 		.EQU v_screen = GPIOR2
                                 		; v_screen parameters - [R] [6] [5] [4] [3] [2] [1] [0]
                                 		; 0 - Screen mode ( 0 - text, 1 - graphical )
                                 		; 1 - Turn off screen ( 0 - active, 1 - inactive ) - Also disables screen update routines, an frees buffer memory for other use
                                 		; 2 - Invert screen ( 0 - normal, 1 - inverted )
                                 		; 3 - V-scroll Left ( 0 - no scroll, 1 - scroll )
                                 		; 4 - V-scroll Right ( 0 - no scroll, 1 - scroll )
                                 		; 5 - Reserved for future use
                                 		; 6 - Reserved for future use
                                 		; R - Reserved for future use
                                 
                                 		; TODO char buff to graph, and v scroll
                                 
                                 		.DSEG
                                 		.ORG	SRAM_START
000060                           v_graph_frame:		.BYTE	graph_buff		;	graphical frame buffer size
000065                           v_char_buffer:		.BYTE	char_buff		;	character buffer size
                                 ;v_internal:			.BYTE	2				;	variable contains number of timer tics, usable as timestamp. Two Byte wide
                                 ;2 Byte internal from ram, moved to GPIOR0/1 (Less ram usage)
000079                           v_scroll_speed:		.BYTE	1				;	variable contains screen shift speed
00007a                           v_scroll_amount:	.BYTE	1				;	variable contains amount of screen moves (with shift)
00007b                           v_frame_position:	.BYTE	1				;	variable contains frame buffer shift (start of buffer)
                                 
                                 		.CSEG
                                 		.ORG	$0000
000000 c014                      		RJMP	I_RESET_ROUTINE			;	0x0000
000001 c113                      		RJMP	unexpected_routine		;	INT0_ROUTINE			;	0x0001
000002 c112                      		RJMP	unexpected_routine		;	INT1_ROUTINE			;	0x0002
000003 c111                      		RJMP	unexpected_routine		;	0x0003
000004 c104                      		RJMP	I_TIMER1_COMPA_ROUTINE	;	0x0004
000005 c10f                      		RJMP	unexpected_routine		;	0x0005
000006 c10e                      		RJMP	unexpected_routine		;	0x0006
000007 c102                      		RJMP	I_UART_RX_ROUTINE		;	0x0007
000008 c102                      		RJMP	I_UART_UDRE_ROUTINE		;	0x0008
000009 c102                      		RJMP	I_UART_TX_ROUTINE		;	0x0009
00000a c10a                      		RJMP	unexpected_routine		;	0x000A
00000b c109                      		RJMP	unexpected_routine		;	0x000B
00000c c108                      		RJMP	unexpected_routine		;	0x000C
00000d c107                      		RJMP	unexpected_routine		;	0x000D
00000e c106                      		RJMP	unexpected_routine		;	0x000E
00000f c105                      		RJMP	unexpected_routine		;	0x000F
000010 c104                      		RJMP	unexpected_routine		;	0x0010
000011 c0fb                      		RJMP	I_EEPRDY_ROUTINE		;	0x0011
000012 c0fb                      		RJMP	I_WDT_ROUTINE			;	0x0012
000013 c101                      		RJMP	unexpected_routine		;	0x0013
000014 c0ff                      		RJMP	I_PCINT2_ROUTINE		;	0x0014
                                 
                                 I_RESET_ROUTINE:
000015 94f8                      		CLI
000016 e5af                      		LDI	Xl, LOW(RAMEND)
000017 bfad                      		OUT	SPL, Xl
000018 e0b1                      		LDI Xh, HIGH(RAMEND)
000019 bfbe                      		OUT SPh, Xh
00001a 2700                      		CLR r16
00001b 9611                      		ADIW X, 1
                                 	ram_clr_loop:
00001c 930e                      		ST - X, r16
00001d 36a0                      		CPI Xl, LOW(SRAM_START)
00001e f7e9                      		BRNE ram_clr_loop
                                 
                                 MAIN:
00001f d018                      		RCALL SETUP
                                 
000020 e001                      		LDI r16, $01
000021 bb0b                      		OUT PORTA, r16
000022 e601                      		LDI r16, 'a'
                                 
                                 	main_loop:
000023 ef1f                      		LDI r17, 255
                                 	delay_dummy:
000024 bb18                      		OUT PORTB, r17
000025 951a                      		DEC r17
000026 f7e9                      		BRNE delay_dummy
000027 d045                      		RCALL UART_TRANSMIT
000028 cffa                      		RJMP main_loop
                                 
                                 EEPROM_WRITE:							; r17 - address, r18 - data
000029 99e1                      		SBIC EECR, EEPE
00002a cffe                      		RJMP EEPROM_WRITE
                                 
00002b 2700                      		CLR r16
00002c bb0c                      		OUT EECR, r16
                                 
00002d bb1e                      		OUT EEAR, r17
00002e bb2d                      		OUT EEDR, r18
                                 
00002f 9ae2                      		SBI EECR, EEMPE
000030 9ae1                      		SBI EECR, EEPE
000031 9508                      		RET
                                 
                                 EEPROM_READ:							; r17 - address, r18 - data
000032 99e1                      		SBIC EECR, EEPE
000033 cffe                      		RJMP EEPROM_READ
                                 
000034 bb1e                      		OUT EEAR, r17
                                 		
000035 9ae0                      		SBI EECR, EERE
000036 b32d                      		IN r18, EEDR
000037 9508                      		RET
                                 
                                 SETUP:
000038 94f8                      		CLI
                                 		; OSCCAL VALUE IN EEPROM 0x00
000039 2711                      		CLR r17
00003a dff7                      		RCALL EEPROM_READ
00003b bf21                      		OUT OSCCAL, R18
                                 
00003c e800                      		LDI r16, $80
00003d bd06                      		OUT	CLKPR, r16		; Enable clock prescaler change
00003e e000                      		LDI	r16, presc
00003f 700f                      		ANDI r16, $0F		; Get only first half of byte
000040 bd06                      		OUT	CLKPR, r16		; Load new prescaler value
                                 
000041 e002                      		LDI r16, $02
000042 b906                      		OUT	PRR, r16		; Disable clock for USI
                                 
000043 e003                      		LDI r16, $03
000044 b901                      		OUT DIDR, r16		; Disable comparator inputs
000045 e800                      		LDI r16, $80
000046 b908                      		OUT ACSR, r16		; Disable comparator
                                 
000047 e003                      		LDI	r16, $03
000048 bb0a                      		OUT DDRA, r16		; Set up PINA0 and PINA1 as outputs
000049 ef0f                      		SER r16
00004a bb07                      		OUT DDRB, r16		; Set entire PortB as outputs
00004b e10e                      		LDI	r16, $1E
00004c bb01                      		OUT DDRD, r16		; Set PIND0, PIND2-4 as outputs
00004d 2700                      		CLR	r16
00004e bb0b                      		OUT	PORTA, r16		; Clear PortA
00004f bb08                      		OUT PORTB, r16		; Clear PortB
000050 e600                      		LDI	r16, $60
000051 bb02                      		OUT	PORTD, r16		; Clear PortD and enable Pull-Up on PIND5 and PIND6
                                 		
000052 2700                      		CLR r16
000053 bd0f                      		OUT TCCR1A, r16
000054 e00a                      		LDI	r16, $0A
000055 bd0e                      		OUT TCCR1B, r16
000056 2711                      		CLR r17
000057 bd1d                      		OUT TCNT1H, r17
000058 bd1c                      		OUT TCNT1L, r17
000059 e017                      		LDI r17, $07
00005a ec0f                      		LDI	r16, $CF
00005b bd1b                      		OUT OCR1AH, r17
00005c bd0a                      		OUT OCR1AL, r16
00005d e400                      		LDI	r16, $40
00005e bf09                      		OUT TIMSK, r16
                                 
00005f 6409                      		ORI r16, $49
000060 bd01                      		OUT WDTCSR, r16		; Enable watchdog, 64ms
                                 
000061 e303                      		LDI r16, 51
000062 e010                      		LDI r17, $00
000063 d002                      		RCALL UART_INIT
                                 
000064 9478                      		SEI
000065 9508                      		RET
                                 
                                 
                                 ;write_matrix:				; r18 : range
                                 ;		LDI r16, 0
                                 ;		LDI r19, 0
                                 ;		RCALL MATRIX_CHAR
                                 ;		RET
                                 
                                 UART_INIT:					; r16:r17 : UBRR - (Fosc)/(((16*~U2X)+(8*U2X))*BAUD)-1
000066 b912                      		OUT UBRRH, r17
000067 b909                      		OUT UBRRL, r16
                                 
000068 e108                      		LDI r16, (1<<RXEN)|(1<<TXEN)
000069 b90a                      		OUT UCSRB, r16
                                 
00006a e00a                      		LDI r16, (1<<USBS)|(1<<UCSZ0)
00006b b903                      		OUT UCSRC, r16
00006c 9508                      		RET
                                 
                                 UART_TRANSMIT:				; r16 : data in
00006d 9b5d                      		SBIS UCSRA, UDRE
00006e cffe                      		RJMP UART_TRANSMIT
                                 
00006f b90c                      		OUT UDR, r16
000070 9508                      		RET
                                 
                                 UART_RECIEVE:				; r16 : data out
000071 9b5f                      		SBIS UCSRA, RXC
000072 cffe                      		RJMP UART_RECIEVE
                                 
000073 b10c                      		in r16, UDR
000074 9508                      		RET
                                 
                                 SLEEP_WELL:
000075 94f8                      		CLI
                                 		
                                 		;LDI r17, 0xF
                                 		;OUT PRR, r17
000076 2700                      		CLR r16
000077 bb0b                      		OUT PORTA, r16
000078 bb08                      		OUT PORTB, r16
000079 bb0a                      		OUT DDRA, r16
00007a bb07                      		OUT DDRB, r16
00007b bb01                      		OUT DDRD, r16
00007c e600                      		LDI	r16, 0x60
00007d bb02                      		OUT	PORTD, r16
                                 
00007e e110                      		LDI r17, 0x10
00007f bf1b                      		OUT GIMSK, r17
000080 e110                      		LDI r17, 0x10
000081 bf1a                      		OUT GIFR, r17
000082 e410                      		LDI r17, 0x40
000083 bf18                      		OUT TIFR, r17
000084 e410                      		LDI r17, 0x40
000085 b915                      		OUT PCMSK2, r17
                                 
000086 95a8                      		WDR
000087 b704                      		IN r16, MCUSR
000088 b501                      		IN r16, WDTCSR
000089 6108                      		ORI r16, (1<<WDCE)|(1<<WDE)
00008a bd01                      		OUT WDTCSR, r16
00008b e000                      		LDI r16, (0<<WDE)
00008c bd01                      		OUT WDTCSR, r16
                                 
00008d e003                      		LDI r16, 3
00008e b705                      		IN r16, MCUCR
00008f 6700                      		SBR r16, 0x70
000090 bf05                      		OUT MCUCR, r16
                                 
000091 9478                      		SEI
000092 0000                      		NOP
000093 9588                      		SLEEP
000094 94f8                      		CLI
                                 
000095 b705                      		IN r16, MCUCR
000096 780f                      		CBR r16, 0x70
000097 bf05                      		OUT MCUCR, r16
                                 
000098 2711                      		CLR r17
000099 bf1b                      		OUT GIMSK, r17
00009a b915                      		OUT PCMSK2, r17
00009b df9c                      		RCALL setup
00009c 9508                      		RET
                                 
                                 DIVIDE_16div16_16mod16:									;a / b = c R d, (rh:rl) r17:r16 / r19:r18 = r17:r16 R r15:r14
00009d 24ee                      		CLR r14
00009e 18ff                      		SUB r15, r15
00009f e141                      		LDI r20, 17
                                 	div_1:
0000a0 1f00                      		ROL r16
0000a1 1f11                      		ROL r17
0000a2 954a                      		DEC r20
0000a3 f409                      		BRNE div_2
0000a4 9508                      		RET
                                 	div_2:
0000a5 1cee                      		ROL r14
0000a6 1cff                      		ROL r15
0000a7 1ae2                      		SUB r14, r18
0000a8 0af3                      		SBC r15, r19
0000a9 f420                      		BRCC div_3
0000aa 0ee2                      		ADD r14, r18
0000ab 1ef3                      		ADC r15, r19
0000ac 9488                      		CLC
0000ad cff2                      		RJMP div_1
                                 	div_3:
0000ae 9408                      		SEC
0000af cff0                      		RJMP div_1
                                 
                                 MULTIPLY_8mul8_16:								;	a * b = c, r16 * r17 = r18:r17
0000b0 2722                      		CLR	r18
0000b1 e038                      		LDI	r19, 8
0000b2 9516                      		LSR r17
                                 	mul_1: 
0000b3 f408                      		BRCC mul_2
0000b4 0f20                      		ADD	r18, r16
                                 	mul_2: 
0000b5 9527                      		ROR r18
0000b6 9517                      		ROR r17
0000b7 953a                      		DEC r19
0000b8 f7d1                      		BRNE mul_1
0000b9 9508                      		RET
                                 
                                 SHIFT_LEFT:								;	r16 : input, output, r17 : shift
                                 	lshift_1:
0000ba 2311                      		TST r17
0000bb f409                      		BRNE PC + 2
0000bc 9508                      		RET
0000bd 0f00                      		LSL r16
0000be 951a                      		DEC r17
0000bf f7d1                      		BRNE lshift_1
0000c0 9508                      		RET
                                 
                                 MATRIX_CHAR:							;	r16 : x, r18 : range, r19 : char [ASCII code]
0000c1 e2e4                      		LDI ZL, LOW(alpha << 1)			;	[char = 0, range = x - fill matrix with 0's in x width]
0000c2 e0fe                      		LDI ZH, HIGH(alpha << 1)		;	[char = 1 - fill with 1's in x width]
0000c3 24ff                      		CLR r15
                                 
0000c4 2ee0                      		MOV r14, r16
                                 		
0000c5 2333                      		TST r19
0000c6 f419                      		BRNE PC + 4
0000c7 2744                      		CLR r20
0000c8 9468                      		SET
0000c9 c012                      		RJMP move_buff
0000ca 3031                      		CPI r19, 1
0000cb f419                      		BRNE PC + 4
0000cc ef4f                      		SER r20
0000cd 9468                      		SET
0000ce c00d                      		RJMP move_buff
                                 
0000cf ef5f                      		SER r21
0000d0 94e8                      		CLT
0000d1 3025                      		CPI r18, 5
0000d2 f008                      		BRLO mul_char
0000d3 2755                      		CLR r21
                                 
                                 	mul_char:
0000d4 932f                      		PUSH r18
0000d5 5230                      		SUBI r19, 32
0000d6 2f03                      		MOV r16, r19
0000d7 e015                      		LDI r17, 5
0000d8 dfd7                      		RCALL MULTIPLY_8mul8_16
0000d9 0fe1                      		ADD ZL, r17
0000da 1ff2                      		ADC ZH, r18
0000db 912f                      		POP r18
                                 
                                 	move_buff:
0000dc f8f0                      		BLD r15, 0
                                 		;LDI YL, LOW(frame)
                                 		;LDI YH, HIGH(frame)
0000dd 0dce                      		ADD YL, r14
0000de 1dde                      		ADC YH, r14
0000df 19de                      		SUB YH, r14
                                 
                                 	update_loop:
0000e0 fef0                      		SBRS r15, 0
0000e1 9145                      		LPM r20, Z+
0000e2 9349                      		ST Y+, r20
0000e3 952a                      		DEC r18
0000e4 f059                      		BREQ loop_end
0000e5 fef0                      		SBRS r15, 0
0000e6 9553                      		INC r21
0000e7 9418                      		SEZ
0000e8 fef0                      		SBRS r15, 0
0000e9 3f5f                      		CPI r21, 0xFF
0000ea f3a9                      		BREQ update_loop
0000eb 3055                      		CPI r21, 5
0000ec f799                      		BRNE update_loop
0000ed 9735                      		SBIW Z, 5
0000ee 2755                      		CLR r21
0000ef cff0                      		RJMP update_loop
                                 	loop_end:
0000f0 94e8                      		CLT
0000f1 9508                      		RET
                                 
                                 /*reverse_byte:							;	r16 : input, output
                                 		LDI r19, 1
                                 		PUSH r19
                                 		MOV r17, r16
                                 		PUSH r17
                                 		CLR r16
                                 		LDI r18, 0x80
                                 		PUSH r18
                                 	rev_1:
                                 		CPI r19, 0x10
                                 		BRSH PC + 6
                                 		LSL r17
                                 		LSR r18
                                 		CP r18, r19
                                 		BRNE rev_1
                                 		RJMP PC + 5 
                                 		LSR r17
                                 		LSL r18
                                 		CP r19, r18
                                 		BRNE rev_1		
                                 		POP r18
                                 		AND r17, r18
                                 		OR r16, r17
                                 		POP r17
                                 		LSR r18
                                 		POP r19
                                 		LSL r19
                                 		PUSH r19
                                 		PUSH r17
                                 		PUSH r18
                                 		TST r18
                                 		BRNE rev_1
                                 		POP r18
                                 		POP r17
                                 		POP r19
                                 		RET*/
                                 
                                 MATRIX_TEXT:							;	r16 : x, Z : text pointer
0000f2 f01e                      		BRTS PC + 4						;	SREG(T) = 0 - ROM pointer
0000f3 9135                      		LPM r19, Z+						;	SREG(T) = 1 - RAM pointer
0000f4 f40e                      		BRTC PC + 2						
0000f5 9131                      		LD r19, Z+
0000f6 2333                      		TST r19							
0000f7 f411                      		BRNE PC + 3
0000f8 94e8                      		CLT
0000f9 9508                      		RET
0000fa e025                      		LDI r18, 5
0000fb 93ff                      		PUSH Zh
0000fc 93ef                      		PUSH Zl
0000fd f940                      		BLD r20, 0
0000fe 934f                      		PUSH r20
0000ff 930f                      		PUSH r16
000100 dfc0                      		RCALL MATRIX_CHAR
000101 910f                      		POP r16
000102 914f                      		POP r20
000103 fb40                      		BST r20, 0
000104 91ef                      		POP Zl
000105 91ff                      		POP Zh
000106 e026                      		LDI r18, 6
000107 0f02                      		ADD r16, r18
000108 cfe9                      		RJMP MATRIX_TEXT
                                 
                                 ;INT0_routine:
                                 ;		RETI
                                 
                                 ;INT1_routine:
                                 ;		RETI
                                 
                                 I_TIMER1_COMPA_ROUTINE:
000109 9518                      		RETI
                                 		/*PUSH r14
                                 		PUSH r16
                                 		PUSH r17
                                 		PUSH r18
                                 		PUSH r19
                                 		PUSH r20
                                 		;	push remaining registers onto stack
                                 		CLR r16
                                 		OUT PORTA, r16
                                 		OUT PORTB, r16
                                 		IN r16, PORTD
                                 		CBR r16, 0x1C
                                 		OUT PORTD, r16
                                 		
                                 		LDS XH, internal + 1
                                 		LDS XL, internal
                                 		
                                 		MOVW r16, XL
                                 		LDI r18, 5
                                 		CLR r19
                                 		RCALL DIVIDE_16div16_16mod16		; r14 = internal % 5
                                 
                                 		MOV r17, r14
                                 		LDI r16, 1
                                 		RCALL SHIFT_LEFT	; r16 = 1 << r17
                                 
                                 		MOV r17, r14
                                 		CPI r17, 2			; if(r17 < 2)
                                 		BRLO PC + 5
                                 		ORI r16, 0x63
                                 		OUT PORTD, r16
                                 		CLR r16
                                 		OUT PORTA, r16
                                 		OUT PORTA, r16
                                 
                                 		LDS r16, start
                                 		ADD r14, r16		; r14 += start
                                 
                                 		LDI YL, LOW(frame)
                                 		LDI YH, HIGH(frame)
                                 		ADD YL, r14
                                 		ADC YH, r14
                                 		SUB YH, r14
                                 
                                 		LD	r16, Y
                                 
                                 		LDS r17, screen
                                 		SBRC r17, 1
                                 		COM r16
                                 		OUT PORTB, r16		; PORTB = r16
                                 		LDS r16, screen
                                 		ANDI r16, 0xC0		; if(screen(7..6) != 0)
                                 		BREQ PC + 2
                                 		RCALL screen_shift
                                 		ADIW XH:XL, 1
                                 
                                 		MOVW r16, XL
                                 		LDI r18, 0xFF
                                 		LDI r19, 0x3F
                                 		RCALL DIVIDE_16div16_16mod16
                                 		TST r14
                                 		BRNE PC + 4
                                 		TST r15
                                 		BRNE PC + 2			; go sleep when internal mod 0x3FFF = 0
                                 		RCALL SLEEP_WELL
                                 		STS internal + 1, XH
                                 		STS internal, XL
                                 		POP r20
                                 		POP r19
                                 		POP r18
                                 		POP r17
                                 		POP r16
                                 		POP r14
                                 		RETI
                                 		*/
                                 		/*
                                 		LDS Xh, count
                                 		LDS Xl, count + 1
                                 		IN r16, PIND
                                 		ANDI r16, 0x40
                                 		BRNE PC + 2
                                 		ADIW Xh:Xl, 1
                                 		STS count, Xh
                                 		STS count + 1, Xl
                                 		
                                 		LDS r17, offcount
                                 		IN r16, PIND
                                 		ANDI r16, 0x40
                                 		BREQ off_jmp
                                 		TST Xh
                                 		BRNE clr_offcount
                                 		TST Xl
                                 		BREQ clr_offcount
                                 		INC r17
                                 		RJMP PC + 2
                                 		clr_offcount:
                                 		CLR r17
                                 		STS offcount, r17
                                 		off_jmp:
                                 
                                 		CLR r16
                                 		CPI r17, 100
                                 		BRNE off_nclr
                                 		STS press, r16
                                 		STS button, r16
                                 		STS count, r16
                                 		STS count + 1, r16
                                 		STS offcount, r16
                                 		STS offcount + 1, r16
                                 		off_nclr:
                                 		SBIW Xh:Xl, 50
                                 		BRMI no_press
                                 		LDI r16, 1
                                 		STS button, r16
                                 		no_press:
                                 		ADIW Xh:Xl, 50
                                 
                                 		LDS r15, press
                                 		IN r17, PIND
                                 		ANDI r17, 0x40
                                 		BRNE  
                                 		TST r16
                                 		BREQ
                                 		TST Xh
                                 		BRNE
                                 		CPI Xl, 50
                                 		BRLO
                                 		LDI r16, 1
                                 		CPI Xl, 0x11110100
                                 		BRHI
                                 		CPC Xh, r16
                                 		BRHI
                                 		CPI r15, 0x80
                                 		BRHI
                                 		INC r15
                                 
                                 		CPI Xl, 0x11110100
                                 		BRLO
                                 		CPC Xh, r16
                                 		BRLO
                                 	screen_shift:
                                 		LDS r18, move
                                 		LDS r20, amount
                                 		LDS r21, screen
                                 		TST r20
                                 		BREQ PC + 2
                                 		RJMP screen_move
                                 		STS move, r20
                                 		LDS r21, screen
                                 		CBR r21, 0xC0
                                 		STS screen, r21
                                 		RET
                                 
                                 	screen_move:
                                 		MOV r17, XH
                                 		MOV r16, XL
                                 		RCALL DIVIDE_16div16_16mod16
                                 		TST r14
                                 		BRNE PC + 3
                                 		TST r15
                                 		BREQ PC + 2
                                 		RET
                                 
                                 		LDS r19, amount
                                 		LDS r16, start
                                 		LDS r20, screen
                                 		SBRC r20, 6
                                 		INC r16
                                 		SBRC r20, 7
                                 		DEC r16
                                 		DEC r19
                                 		STS start, r16
                                 		STS amount, r19
                                 		RET
                                 
                                 		*/
                                 
                                 I_UART_RX_ROUTINE:
00010a 9518                      		RETI
                                 
                                 I_UART_UDRE_ROUTINE:
00010b 9518                      		RETI
                                 
                                 I_UART_TX_ROUTINE:
00010c 9518                      		RETI
                                 
                                 I_EEPRDY_ROUTINE:
00010d 9518                      		RETI
                                 
                                 I_WDT_ROUTINE:
00010e 930f                      		PUSH r16
00010f b501                      		IN r16, WDTCSR
000110 6400                      		ORI r16, 0x40
000111 bd01                      		OUT WDTCSR, r16
000112 910f                      		POP r16
000113 9518                      		RETI
                                 
                                 I_PCINT2_ROUTINE:
000114 9518                      		RETI
                                 
                                 unexpected_routine:
000115 cfff                      		rjmp unexpected_routine
                                 
                                 ;hello:	.DB "Hello world!", 0, 0
                                 ;text1:	.DB "Tak", 0
                                 
                                 		.ORG	(FLASHEND - 237)	;Program ends at 0x02F9 (tn2313[a]), 0x06F9 (tn4313)
000712 0000
000713 0000
000714 0000
000715 7900                      alpha:	.DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, \
000716 0000
000717 7000
000718 7000
000719 1400
00071a 147f                      			0x00, 0x70, 0x00, 0x70, 0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14, \
00071b 147f
00071c 2a12
00071d 2a7f
00071e 6224
00071f 0864                      			0x12, 0x2A, 0x7F, 0x2A, 0x24, 0x62, 0x64, 0x08, 0x13, 0x23, \
000720 2313
000721 4936
000722 2255
000723 0005
000724 6050                      			0x36, 0x49, 0x55, 0x22, 0x05, 0x00, 0x50, 0x60, 0x00, 0x00, \
000725 0000
000726 1c00
000727 4122
000728 0000
000729 2241                      			0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, 0x41, 0x22, 0x1C, 0x00, \
00072a 001c
00072b 2a08
00072c 2a1c
00072d 0808
00072e 3e08                      			0x08, 0x2A, 0x1C, 0x2A, 0x08, 0x08, 0x08, 0x3E, 0x08, 0x08, \
00072f 0808
000730 0500
000731 0006
000732 0800
000733 0808                      			0x00, 0x05, 0x06, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, \
000734 0808
000735 0600
000736 0006
000737 0200
000738 0804                      			0x00, 0x06, 0x06, 0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, \
000739 2010
00073a 453e
00073b 5149
00073c 003e
00073d 7f21                      			0x3E, 0x45, 0x49, 0x51, 0x3E, 0x00, 0x21, 0x7F, 0x01, 0x00, \
00073e 0001
00073f 4321
000740 4945
000741 4231
000742 5141                      			0x21, 0x43, 0x45, 0x49, 0x31, 0x42, 0x41, 0x51, 0x69, 0x46, \
000743 4669
000744 140c
000745 7f24
000746 7204
000747 5151                      			0x0C, 0x14, 0x24, 0x7F, 0x04, 0x72, 0x51, 0x51, 0x51, 0x4E, \
000748 4e51
000749 291e
00074a 4949
00074b 4006
00074c 4847                      			0x1E, 0x29, 0x49, 0x49, 0x06, 0x40, 0x47, 0x48, 0x50, 0x60, \
00074d 6050
00074e 4936
00074f 4949
000750 3036
000751 4949                      			0x36, 0x49, 0x49, 0x49, 0x36, 0x30, 0x49, 0x49, 0x4A, 0x3C, \
000752 3c4a
000753 3600
000754 0036
000755 0000
000756 3635                      			0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x35, 0x36, 0x00, 0x00, \
000757 0000
000758 0800
000759 2214
00075a 1441
00075b 1414                      			0x00, 0x08, 0x14, 0x22, 0x41, 0x14, 0x14, 0x14, 0x14, 0x14, \
00075c 1414
00075d 2241
00075e 0814
00075f 2000
000760 4540                      			0x41, 0x22, 0x14, 0x08, 0x00, 0x20, 0x40, 0x45, 0x48, 0x30, \
000761 3048
000762 4926
000763 414f
000764 3f3e
000765 4444                      			0x26, 0x49, 0x4F, 0x41, 0x3E, 0x3F, 0x44, 0x44, 0x44, 0x3F, \
000766 3f44
000767 497f
000768 4949
000769 3e36
00076a 4141                      			0x7F, 0x49, 0x49, 0x49, 0x36, 0x3E, 0x41, 0x41, 0x41, 0x22, \
00076b 2241
00076c 417f
00076d 2241
00076e 7f1c
00076f 4949                      			0x7F, 0x41, 0x41, 0x22, 0x1C, 0x7F, 0x49, 0x49, 0x49, 0x41, \
000770 4149
000771 487f
000772 4048
000773 3e40
000774 4141                      			0x7F, 0x48, 0x48, 0x40, 0x40, 0x3E, 0x41, 0x41, 0x45, 0x26, \
000775 2645
000776 087f
000777 0808
000778 007f
000779 7f41                      			0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x41, 0x7F, 0x41, 0x00, \
00077a 0041
00077b 0102
00077c 7e41
00077d 7f40
00077e 1408                      			0x02, 0x01, 0x41, 0x7E, 0x40, 0x7F, 0x08, 0x14, 0x22, 0x41, \
00077f 4122
000780 017f
000781 0101
000782 7f01
000783 1020                      			0x7F, 0x01, 0x01, 0x01, 0x01, 0x7F, 0x20, 0x10, 0x20, 0x7F, \
000784 7f20
000785 107f
000786 0408
000787 3e7f
000788 4141                      			0x7F, 0x10, 0x08, 0x04, 0x7F, 0x3E, 0x41, 0x41, 0x41, 0x3E, \
000789 3e41
00078a 487f
00078b 4848
00078c 3e30
00078d 4541                      			0x7F, 0x48, 0x48, 0x48, 0x30, 0x3E, 0x41, 0x45, 0x42, 0x3D, \
00078e 3d42
00078f 487f
000790 4a4c
000791 3131
000792 4949                      			0x7F, 0x48, 0x4C, 0x4A, 0x31, 0x31, 0x49, 0x49, 0x49, 0x46, \
000793 4649
000794 4040
000795 407f
000796 7e40
000797 0101                      			0x40, 0x40, 0x7F, 0x40, 0x40, 0x7E, 0x01, 0x01, 0x01, 0x7E, \
000798 7e01
000799 027c
00079a 0201
00079b 7f7c
00079c 0c02                      			0x7C, 0x02, 0x01, 0x02, 0x7C, 0x7F, 0x02, 0x0C, 0x02, 0x7F, \
00079d 7f02
00079e 1463
00079f 1408
0007a0 6063
0007a1 0f10                      			0x63, 0x14, 0x08, 0x14, 0x63, 0x60, 0x10, 0x0F, 0x10, 0x60, \
0007a2 6010
0007a3 4543
0007a4 5149
0007a5 0061
0007a6 7f00                      			0x43, 0x45, 0x49, 0x51, 0x61, 0x00, 0x00, 0x7F, 0x41, 0x41, \
0007a7 4141
0007a8 1020
0007a9 0408
0007aa 4102
0007ab 7f41                      			0x20, 0x10, 0x08, 0x04, 0x02, 0x41, 0x41, 0x7F, 0x00, 0x00, \
0007ac 0000
0007ad 2010
0007ae 2040
0007af 0110
0007b0 0101                      			0x10, 0x20, 0x40, 0x20, 0x10, 0x01, 0x01, 0x01, 0x01, 0x01, \
0007b1 0101
0007b2 4000
0007b3 1020
0007b4 0200
0007b5 1515                      			0x00, 0x40, 0x20, 0x10, 0x00, 0x02, 0x15, 0x15, 0x15, 0x0F, \
0007b6 0f15
0007b7 097f
0007b8 1111
0007b9 0e0e
0007ba 1111                      			0x7F, 0x09, 0x11, 0x11, 0x0E, 0x0E, 0x11, 0x11, 0x11, 0x02, \
0007bb 0211
0007bc 110e
0007bd 0911
0007be 0e7f
0007bf 1515                      			0x0E, 0x11, 0x11, 0x09, 0x7F, 0x0E, 0x15, 0x15, 0x15, 0x0C, \
0007c0 0c15
0007c1 3f08
0007c2 4048
0007c3 0820
0007c4 1514                      			0x08, 0x3F, 0x48, 0x40, 0x20, 0x08, 0x14, 0x15, 0x15, 0x1E, \
0007c5 1e15
0007c6 087f
0007c7 1010
0007c8 000f
0007c9 5f11                      			0x7F, 0x08, 0x10, 0x10, 0x0F, 0x00, 0x11, 0x5F, 0x01, 0x00, \
0007ca 0001
0007cb 0102
0007cc 5e11
0007cd 0000
0007ce 047f                      			0x02, 0x01, 0x11, 0x5E, 0x00, 0x00, 0x7F, 0x04, 0x0A, 0x11, \
0007cf 110a
0007d0 4100
0007d1 017f
0007d2 1f00
0007d3 0c10                      			0x00, 0x41, 0x7F, 0x01, 0x00, 0x1F, 0x10, 0x0C, 0x10, 0x0F, \
0007d4 0f10
0007d5 081f
0007d6 1010
0007d7 0e0f
0007d8 1111                      			0x1F, 0x08, 0x10, 0x10, 0x0F, 0x0E, 0x11, 0x11, 0x11, 0x0E, \
0007d9 0e11
0007da 141f
0007db 1414
0007dc 0808
0007dd 1414                      			0x1F, 0x14, 0x14, 0x14, 0x08, 0x08, 0x14, 0x14, 0x0, 0xC1F, \
0007de 1f00
0007df 081f
0007e0 1010
0007e1 0908
0007e2 1515                      			0x1F, 0x08, 0x10, 0x10, 0x08, 0x09, 0x15, 0x15, 0x15, 0x02, \
0007e3 0215
0007e4 7e10
0007e5 0111
0007e6 1e02
0007e7 0101                      			0x10, 0x7E, 0x11, 0x01, 0x02, 0x1E, 0x01, 0x01, 0x02, 0x1F, \
0007e8 1f02
0007e9 021c
0007ea 0201
0007eb 1e1c
0007ec 0601                      			0x1C, 0x02, 0x01, 0x02, 0x1C, 0x1E, 0x01, 0x06, 0x01, 0x1E, \
0007ed 1e01
0007ee 0a11
0007ef 0a04
0007f0 1811
0007f1 0505                      			0x11, 0x0A, 0x04, 0x0A, 0x11, 0x18, 0x05, 0x05, 0x05, 0x1E, \
0007f2 1e05
0007f3 1311
0007f4 1915
0007f5 0011
0007f6 3608                      			0x11, 0x13, 0x15, 0x19, 0x11, 0x00, 0x08, 0x36, 0x41, 0x00, \
0007f7 0041
0007f8 0000
0007f9 007f
0007fa 0000
0007fb 3641                      			0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x41, 0x36, 0x08, 0x00, \
0007fc 0008
0007fd 0804
0007fe 0408
0007ff 0008                      			0x04, 0x08, 0x08, 0x04, 0x08, 0


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATtiny4313" register use summary:
x  :   2 y  :   1 z  :   4 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   8 r15:  10 r16:  81 r17:  31 r18:  16 r19:  11 r20:  10 
r21:   6 r22:   0 r23:   0 r24:   0 r25:   0 r26:   3 r27:   2 r28:   1 
r29:   2 r30:   4 r31:   4 
Registers used: 17 out of 35 (48.6%)

"ATtiny4313" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   3 add   :   5 adiw  :   1 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   2 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 break :   0 breq  :   2 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   0 brtc  :   1 brts  :   1 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   1 cbi   :   0 cbr   :   1 clc   :   1 
clh   :   0 cli   :   4 cln   :   0 clr   :  14 cls   :   0 clt   :   3 
clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 cpi   :   5 
cpse  :   0 dec   :   5 eor   :   0 icall :   0 ijmp  :   0 in    :   7 
inc   :   1 ld    :   1 ldd   :   0 ldi   :  35 lds   :   0 lpm   :   2 
lsl   :   1 lsr   :   1 mov   :   2 movw  :   0 neg   :   0 nop   :   1 
or    :   0 ori   :   3 out   :  50 pop   :   6 push  :   6 rcall :   7 
ret   :  13 reti  :   7 rjmp  :  33 rol   :   4 ror   :   2 sbc   :   1 
sbci  :   0 sbi   :   3 sbic  :   2 sbis  :   2 sbiw  :   1 sbr   :   1 
sbrc  :   0 sbrs  :   3 sec   :   1 seh   :   0 sei   :   2 sen   :   0 
ser   :   3 ses   :   0 set   :   2 sev   :   0 sez   :   1 sleep :   1 
spm   :   0 st    :   2 std   :   0 sts   :   0 sub   :   3 subi  :   1 
swap  :   0 tst   :   3 wdr   :   1 
Instructions used: 56 out of 105 (53.3%)

"ATtiny4313" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001000    556    476   1032    4096  25.2%
[.dseg] 0x000060 0x00007c      0     28     28     256  10.9%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 0 warnings
